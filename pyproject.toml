[tool.poetry]
name = "joystick_diagrams"
description = ""
authors = ["Robert Cox"]
version = "2.1.0"
homepage = "https://www.joystick-diagrams.com"
readme = "readme.md"
repository = "https://github.com/Rexeh/joystick-diagrams"

[tool.poetry.dependencies]
python = ">=3.11, <3.13"
ply = "^3.11"
requests = "^2.31.0"
qt-material = "^2.14"
dynaconf = "^3.2.4"
pyside6 = "^6.6.1"
semver = "^3.0.2"
pre-commit = "^3.6.0"
qtawesome = "^1.3.0"

[tool.poetry.group.dev.dependencies]
pyuic5-tool = "^0.0.1"
pytest = "^7.2.0"
pytest-qt = "^4.2.0"
pytest-cov = "^4.0.0"
coveralls = "^3.3.0"
cx-Freeze = "^6.15.0"
mypy = "^1.7.1"
isort = "^5.12.0"
ruff = "^0.2.0"

[tool.poetry.scripts]
version_package = 'joystick_diagrams.version:generate_version'

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "Joystick_Diagrams"
description = "Automatically create diagrams for your throttles, joysticks and custom HID devices"
dynamic = ["version", "readme"]

[tool.setuptools]
packages  = ["joystick_diagrams"]

[tool.setuptools.dynamic]
version = { attr = "joystick_diagrams.version.VERSION" }
readme = { file = "readme.md" }

[tool.distutils.build_exe]
silent = 3
optimize = 2
includes = [
    "joystick_diagrams.plugins.dcs_world_plugin",
    "joystick_diagrams.plugins.star_citizen_plugin",
    "joystick_diagrams.plugins.joystick_gremlin_plugin",
]
packages = [
    "joystick_diagrams.plugins.dcs_world_plugin",
    "joystick_diagrams.plugins.star_citizen_plugin",
    "joystick_diagrams.plugins.joystick_gremlin_plugin",
]
include_files = [
    "./img",
    "./templates",
    "./readme.md",
    "version_manifest.json",
    "./theme"
]
zip_include_packages = ["encodings", "PySide6","dynaconf"]
bin_excludes =  ["Qt6Pdf.dll", "QtOpenGL.pyd"]
excludes = [
    "tkinter",
    "test",
    "distutils",
    "asyncio",
    "concurrent",
    "joystick_diagrams..mypy_cache",
    "unittest"
]
replace_paths = ["*="]

[tool.coverage.paths]
source = ["joystick_diagrams/"]

[tool.coverage.run]
omit = [
    ".*",
    "*/site-packages/*",
    "*/config.py",
    "*/plugins/*",
    "*/ui/*",
    "*/db*",
]

[tool.coverage.report]
fail_under = 40
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    'if __name__ == "__main__":',
]

[tool.mypy]
warn_return_any = false
warn_unused_configs = false
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = ["dynaconf.*", "qt_material.*","qtawesome.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
markers = ["uitest"]

[tool.ruff]
exclude = ["qt_ui/*", "docs/*"]
target-version = "py311"

[tool.ruff.lint]
select = ["A", "E", "C90", "I", "W", "F", "B", "Q", "N", "PL"]

ignore = [
    "E501",
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "COM812",
    "COM819",
    "ISC001",
    "ISC002",
    "PLR2004"
]

unfixable = ["B"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs,tools,qt_ui}/*" = ["E402", "PLR2004"]
"**/{ui}/*" = ["N", "PLR"]

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true
